{"version":3,"sources":["App.jsx","reportWebVitals.js","index.jsx"],"names":["App","useState","time","setTime","watchOn","setWatchOn","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","handleStart","className","Math","floor","slice","onClick","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PA+FeA,MAzFf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIbC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAQzB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLR,GACFD,GAAQ,SAACU,GAAD,OAASA,EAAM,QAGtB,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAACX,IAEJ,IAAMY,EAAc,WAElBX,GAAW,SAACD,GAAD,OAAcA,KACrBA,GACFD,EAAQ,IAWZ,OACE,8BACE,yBAAQc,UAAU,SAAlB,UACE,2CACA,sBAAKA,UAAU,gBAAf,UACE,iCACG,WAAKC,KAAKC,MAAOjB,EAAO,KAAQ,MAAQkB,OAAO,GADlD,OAIA,iCACG,WAAKF,KAAKC,MAAOjB,EAAO,GAAM,KAAOkB,OAAO,GAD/C,OAIA,+BACG,WAAKF,KAAKC,MAAMjB,EAAO,KAAOkB,OAAO,QAG1C,sBAAKH,UAAU,iBAAf,UACIb,EASA,wBACEa,UAAU,SACVI,QAASL,EACTM,KAAK,SAHP,kBARA,wBACEL,UAAU,SACVK,KAAK,SACLD,QAASL,EAHX,mBAgBF,wBACEC,UAAU,SACVK,KAAK,SACLD,QA9CS,WACjBhB,GAAW,IA0CL,kBAOA,wBACEY,UAAU,SACVK,KAAK,SACLD,QAlDU,WAClBlB,EAAQ,GACRE,GAAW,IA6CL,4BCpEKkB,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.d6489c81.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport './App.scss';\nimport 'bulma';\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [watchOn, setWatchOn] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (watchOn) {\n          setTime((val) => val + 1);\n        }\n      });\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [watchOn]);\n\n  const handleStart = () => {\n    // eslint-disable-next-line no-shadow\n    setWatchOn((watchOn) => !watchOn);\n    if (watchOn) {\n      setTime(0);\n    }\n  };\n  const handleWait = () => {\n    setWatchOn(false);\n  };\n  const handleReset = () => {\n    setTime(0);\n    setWatchOn(true);\n  };\n\n  return (\n    <div>\n      <header className=\"header\">\n        <h1>StopWatch</h1>\n        <div className=\"header__timer\">\n          <span>\n            {(`0${Math.floor((time / 3600) % 100)}`).slice(-2)}\n            :\n          </span>\n          <span>\n            {(`0${Math.floor((time / 60) % 60)}`).slice(-2)}\n            :\n          </span>\n          <span>\n            {(`0${Math.floor(time % 60)}`).slice(-2)}\n          </span>\n        </div>\n        <div className=\"header__button\">\n          {!watchOn ? (\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={handleStart}\n            >\n              Start\n            </button>\n          ) : (\n            <button\n              className=\"button\"\n              onClick={handleStart}\n              type=\"button\"\n            >\n              Stop\n            </button>\n          )}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={handleWait}\n          >\n            Wait\n          </button>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}