{"version":3,"sources":["App.jsx","reportWebVitals.js","index.jsx"],"names":["App","useState","time","setTime","watchStart","setWatchStart","useEffect","stream$","Subject","interval","pipe","takeUntil","subscribe","prevTime","next","complete","handleStart","prevWatchOn","className","Math","floor","slice","onClick","type","onDoubleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PA8FeA,MAxFf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAEuBF,oBAAS,GAFhC,mBAENG,EAFM,KAEMC,EAFN,KAIbC,qBAAU,WACR,IAAMC,EAAU,IAAIC,IAQpB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLR,GACFD,GAAQ,SAACU,GAAD,OAAcA,EAAW,QAGhC,WACLN,EAAQO,OACRP,EAAQQ,cAET,CAACX,IAEJ,IAAMY,EAAc,WAClBX,GAAc,SAACY,GAAD,OAAkBA,KAC5Bb,GACFD,EAAQ,IAWZ,OACE,8BACE,yBAAQe,UAAU,SAAlB,UACE,2CACA,sBAAKA,UAAU,gBAAf,UACE,iCACG,WAAKC,KAAKC,MAAOlB,EAAO,KAAQ,MAAQmB,OAAO,GADlD,OAIA,iCACG,WAAKF,KAAKC,MAAOlB,EAAO,GAAM,KAAOmB,OAAO,GAD/C,OAIA,+BACG,WAAKF,KAAKC,MAAMlB,EAAO,KAAOmB,OAAO,QAG1C,sBAAKH,UAAU,iBAAf,UACId,EASA,wBACEc,UAAU,SACVI,QAASN,EACTO,KAAK,SAHP,kBARA,wBACEL,UAAU,SACVK,KAAK,SACLD,QAASN,EAHX,mBAgBF,wBACEE,UAAU,SACVK,KAAK,SACLC,cA9CS,WACjBnB,GAAc,IA0CR,kBAOA,wBACEa,UAAU,SACVK,KAAK,SACLD,QAlDU,WAClBnB,EAAQ,GACRE,GAAc,IA6CR,4BCnEKoB,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.d811981b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport './App.scss';\nimport 'bulma';\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [watchStart, setWatchStart] = useState(false);\n\n  useEffect(() => {\n    const stream$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(stream$))\n      .subscribe(() => {\n        if (watchStart) {\n          setTime((prevTime) => prevTime + 1);\n        }\n      });\n    return () => {\n      stream$.next();\n      stream$.complete();\n    };\n  }, [watchStart]);\n\n  const handleStart = () => {\n    setWatchStart((prevWatchOn) => !prevWatchOn);\n    if (watchStart) {\n      setTime(0);\n    }\n  };\n  const handleWait = () => {\n    setWatchStart(false);\n  };\n  const handleReset = () => {\n    setTime(0);\n    setWatchStart(true);\n  };\n\n  return (\n    <div>\n      <header className=\"header\">\n        <h1>StopWatch</h1>\n        <div className=\"header__timer\">\n          <span>\n            {(`0${Math.floor((time / 3600) % 100)}`).slice(-2)}\n            :\n          </span>\n          <span>\n            {(`0${Math.floor((time / 60) % 60)}`).slice(-2)}\n            :\n          </span>\n          <span>\n            {(`0${Math.floor(time % 60)}`).slice(-2)}\n          </span>\n        </div>\n        <div className=\"header__button\">\n          {!watchStart ? (\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={handleStart}\n            >\n              Start\n            </button>\n          ) : (\n            <button\n              className=\"button\"\n              onClick={handleStart}\n              type=\"button\"\n            >\n              Stop\n            </button>\n          )}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onDoubleClick={handleWait}\n          >\n            Wait\n          </button>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}